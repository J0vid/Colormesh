% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tps.unwarp.R
\name{tps.unwarp}
\alias{tps.unwarp}
\title{Non-linear image registration using TPS deformation.}
\usage{
tps.unwarp(
  imagedir,
  landmarks,
  write.images = T,
  write.dir = NULL,
  color.sampling = F,
  num.delaunay.passes = 2,
  px.radius = 2
)
}
\arguments{
\item{imagedir}{directory of images to deform. Only images with landmarks will be processed. The landmark file names are assumed to exactly match the image names.}

\item{landmarks}{A landmark array with dimensions N_landmarks x 2 x N_observations. dimnames(landmarks)[[3]] should have the corresponding image filenames for each observation.}

\item{write.images}{T or F indicating whether or not to save warped images. This is highly recommended so you can check out of image warping worked like expected.}

\item{write.dir}{Where to save warped images. Images will be named after the original image name (is that a bad idea because of overwriting? We will find out).}

\item{color.sampling}{T or F indicating whether or not to sample color using delaunay triangulation.}

\item{num.delaunay.passes}{The number of rounds of delaunay triangulation to perform if color sampling is desired.}

\item{px.radius}{The size of the circular neighborhood (in pixels) to sample color around each triangulated point.}
}
\value{
If write.images is true, warped images will be saved to the write.dir directory. If color sampling is true, the function will return $sampled.color-- an N_points x 3 (RGB) x N_observations array of sampled color values. A tri.surf.points class object will also be returned as $delaunay.
}
\description{
Non-linear image registration using TPS deformation.
}
